{"ast":null,"code":"import _regeneratorRuntime from \"D:/gav(1)/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/gav(1)/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { config } from \"../../../config\";\nimport httpRequest from \"../../../utils/request\"; //import getItem from '../../../utils/localStroageAccess'\n\nimport { notify, useInput } from \"../../../utils/common\";\nexport var createPerson = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(email, celular, nome, senha, pessoa_cadastro_id, pessoa_tipo_id, cb) {\n    var body, _yield$httpRequest$po, data, err;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            body = {\n              celular: celular,\n              email: email,\n              pessoa_tipo_id: pessoa_tipo_id,\n              pessoa_cadastro_id: pessoa_cadastro_id,\n              pessoa_fisica: {\n                nome: nome\n              },\n              pessoa_juridica: {\n                nome: nome\n              },\n              user: {\n                password: senha,\n                email: email\n              }\n            };\n            _context.next = 4;\n            return httpRequest.post(\"\".concat(config.baseUrl, \"/api/captacao/pessoas\"), false, \"\", body);\n\n          case 4:\n            _yield$httpRequest$po = _context.sent;\n            data = _yield$httpRequest$po.data;\n            //console.log(\"data\", data)\n            notify('success', \"Successfully Created\");\n            cb();\n            return _context.abrupt(\"return\", data);\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            cb();\n            err = \"\";\n\n            if (\"user.email\" in _context.t0.response.data.errors) {\n              err += _context.t0.response.data.errors[\"user.email\"][0];\n            }\n\n            if (\"user.password\" in _context.t0.response.data.errors) {\n              err += _context.t0.response.data.errors[\"user.password\"][0];\n            }\n\n            notify(\"error\", err); // console.log(error.response.data.errors)\n\n            return _context.abrupt(\"return\", null);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 11]]);\n  }));\n\n  return function createPerson(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:/gav(1)/api/cadastro/captasao/createPerson.js"],"names":["config","httpRequest","notify","useInput","createPerson","email","celular","nome","senha","pessoa_cadastro_id","pessoa_tipo_id","cb","body","pessoa_fisica","pessoa_juridica","user","password","post","baseUrl","data","err","response","errors"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB,C,CACA;;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,uBAAjC;AAIA,OAAO,IAAMC,YAAY;AAAA,sEAAG,iBAAOC,KAAP,EAAcC,OAAd,EAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,kBAApC,EAAwDC,cAAxD,EAAwEC,EAAxE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdC,YAAAA,IAFc,GAEP;AACTN,cAAAA,OAAO,EAAEA,OADA;AAETD,cAAAA,KAAK,EAAEA,KAFE;AAGTK,cAAAA,cAAc,EAAEA,cAHP;AAITD,cAAAA,kBAAkB,EAAEA,kBAJX;AAKTI,cAAAA,aAAa,EAAE;AACXN,gBAAAA,IAAI,EAAEA;AADK,eALN;AAQTO,cAAAA,eAAe,EAAE;AACbP,gBAAAA,IAAI,EAAEA;AADO,eARR;AAWTQ,cAAAA,IAAI,EAAE;AACFC,gBAAAA,QAAQ,EAAER,KADR;AAEFH,gBAAAA,KAAK,EAAEA;AAFL;AAXG,aAFO;AAAA;AAAA,mBAoBGJ,WAAW,CAACgB,IAAZ,WAChBjB,MAAM,CAACkB,OADS,4BAEnB,KAFmB,EAGnB,EAHmB,EAInBN,IAJmB,CApBH;;AAAA;AAAA;AAoBZO,YAAAA,IApBY,yBAoBZA,IApBY;AA0BpB;AACAjB,YAAAA,MAAM,CAAC,SAAD,EAAY,sBAAZ,CAAN;AACAS,YAAAA,EAAE;AA5BkB,6CA6BbQ,IA7Ba;;AAAA;AAAA;AAAA;AA+BpBR,YAAAA,EAAE;AACES,YAAAA,GAhCgB,GAgCV,EAhCU;;AAiCpB,gBAAG,gBAAgB,YAAMC,QAAN,CAAeF,IAAf,CAAoBG,MAAvC,EAA+C;AAC3CF,cAAAA,GAAG,IAAI,YAAMC,QAAN,CAAeF,IAAf,CAAoBG,MAApB,CAA2B,YAA3B,EAAyC,CAAzC,CAAP;AACH;;AAED,gBAAG,mBAAmB,YAAMD,QAAN,CAAeF,IAAf,CAAoBG,MAA1C,EAAkD;AAC9CF,cAAAA,GAAG,IAAI,YAAMC,QAAN,CAAeF,IAAf,CAAoBG,MAApB,CAA2B,eAA3B,EAA4C,CAA5C,CAAP;AACH;;AACDpB,YAAAA,MAAM,CAAC,OAAD,EAAUkB,GAAV,CAAN,CAxCoB,CAyCrB;;AAzCqB,6CA0Cb,IA1Ca;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZhB,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["import { config } from \"../../../config\"\nimport httpRequest from \"../../../utils/request\"\n//import getItem from '../../../utils/localStroageAccess'\nimport { notify, useInput } from \"../../../utils/common\"\n\n\n\nexport const createPerson = async (email, celular, nome, senha, pessoa_cadastro_id, pessoa_tipo_id, cb) => {\n    try {\n        const body = {\n            celular: celular,\n            email: email,\n            pessoa_tipo_id: pessoa_tipo_id,\n            pessoa_cadastro_id: pessoa_cadastro_id,\n            pessoa_fisica: {\n                nome: nome\n            },\n            pessoa_juridica: {\n                nome: nome\n            },\n            user: {\n                password: senha,\n                email: email\n\n            }\n        }\n\n        const { data } = await httpRequest.post(\n            `${config.baseUrl}/api/captacao/pessoas`,\n            false,\n            \"\",\n            body\n        )\n        //console.log(\"data\", data)\n        notify('success', \"Successfully Created\")\n        cb()\n        return data\n    } catch (error) {\n        cb()\n        let err = \"\"\n        if(\"user.email\" in error.response.data.errors ){\n            err += error.response.data.errors[\"user.email\"][0]\n        }\n\n        if(\"user.password\" in error.response.data.errors ){\n            err += error.response.data.errors[\"user.password\"][0]\n        }\n        notify(\"error\", err)\n       // console.log(error.response.data.errors)\n        return null\n    }\n}"]},"metadata":{},"sourceType":"module"}