{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { config } from \"../../config\";\nimport httpRequest from \"../../utils/request\";\nimport { getSession } from 'next-auth/client';\nimport { notify, useInput } from \"../../utils/common\";\nexport const updateOwner = async (newData, obj) => {\n  try {\n    const pessoa_fisica = _objectSpread(_objectSpread({}, obj.pessoa_fisica), {}, {\n      cpf: newData.cpf,\n      nome: newData.nome\n    });\n\n    const endereco = [{\n      \"latitude\": obj.latitude,\n      \"longitude\": obj.longitude,\n      \"logradouro\": newData.rua,\n      \"cep\": newData.cep,\n      \"numero\": newData.numero,\n      \"complemento\": newData.complemento,\n      \"bairro\": newData.bairro,\n      \"cidade_id\": newData.cidadeId\n    }];\n    let pessoa_arquivos = [];\n\n    if (obj.pessoa_arquivos) {\n      pessoa_arquivos = [...obj.pessoa_arquivos];\n    }\n\n    if (newData.cnhId) {\n      pessoa_arquivos.push({\n        arquivo_id: newData.cnhId,\n        pessoa_arquivo_tipo_id: 1\n      });\n    }\n\n    if (newData.comprovanteId) {\n      pessoa_arquivos.push({\n        arquivo_id: newData.comprovanteId,\n        pessoa_arquivo_tipo_id: 2\n      });\n    }\n\n    const body = _objectSpread(_objectSpread({\n      telefone: obj.telefone,\n      celular: newData.celular,\n      email: newData.email,\n      pessoa_tipo_id: obj.pessoa_tipo_id,\n      pessoa_cadastro_id: obj.pessoa_cadastro_id,\n      pessoa_status_id: obj.pessoa_status_id,\n      recebe_via_administrador: obj.recebe_via_administrador,\n      pessoa_fisica: pessoa_fisica,\n      pessoa_juridica: obj.pessoa_juridica,\n      endereco: [endereco],\n      carros: obj.carros,\n      pessoa_arquivos: obj.pessoa_arquivos,\n      conta_bancaria: obj.conta_bancaria\n    }, pessoa_arquivos.length && {\n      pessoa_arquivos: pessoa_arquivos\n    }), newData.prefilId && {\n      foto_perfil_arquivo_id: newData.prefilId\n    });\n\n    const session = await getSession();\n    const token = 'Bearer ' + session.access_token;\n    console.log(\"body =\", body);\n    const res = await httpRequest.patch(`${config.baseUrl}/api/proprietario`, true, token, body);\n    return res && res.data ? res.data : res;\n  } catch (error) {\n    console.log(error); // notify(\"error\", error.response ? error.response.data : '')\n\n    return null;\n  }\n};","map":{"version":3,"sources":["D:/gav(1)/api/owner/updateOwner.js"],"names":["config","httpRequest","getSession","notify","useInput","updateOwner","newData","obj","pessoa_fisica","cpf","nome","endereco","latitude","longitude","rua","cep","numero","complemento","bairro","cidadeId","pessoa_arquivos","cnhId","push","arquivo_id","pessoa_arquivo_tipo_id","comprovanteId","body","telefone","celular","email","pessoa_tipo_id","pessoa_cadastro_id","pessoa_status_id","recebe_via_administrador","pessoa_juridica","carros","conta_bancaria","length","prefilId","foto_perfil_arquivo_id","session","token","access_token","console","log","res","patch","baseUrl","data","error"],"mappings":"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","sourcesContent":["import { config } from \"../../config\"\n\nimport httpRequest from \"../../utils/request\"\nimport { getSession } from 'next-auth/client'\nimport { notify, useInput } from \"../../utils/common\"\n\n\nexport const updateOwner = async (newData, obj) => {\n\n    try {\n\n        const pessoa_fisica = { ...obj.pessoa_fisica, cpf: newData.cpf, nome: newData.nome }\n        const endereco = [{\n            \"latitude\": obj.latitude,\n            \"longitude\": obj.longitude,\n            \"logradouro\": newData.rua,\n            \"cep\": newData.cep,\n            \"numero\": newData.numero,\n            \"complemento\": newData.complemento,\n            \"bairro\": newData.bairro,\n            \"cidade_id\": newData.cidadeId\n        }]\n        let pessoa_arquivos = []\n\n        if (obj.pessoa_arquivos) {\n            pessoa_arquivos = [...obj.pessoa_arquivos]\n        }\n\n        if (newData.cnhId) {\n            pessoa_arquivos.push({ arquivo_id: newData.cnhId, pessoa_arquivo_tipo_id: 1 })\n        }\n        if (newData.comprovanteId) {\n            pessoa_arquivos.push({ arquivo_id: newData.comprovanteId, pessoa_arquivo_tipo_id: 2 })\n        }\n        const body = {\n            telefone: obj.telefone,\n            celular: newData.celular,\n            email: newData.email,\n            pessoa_tipo_id: obj.pessoa_tipo_id,\n            pessoa_cadastro_id: obj.pessoa_cadastro_id,\n            pessoa_status_id: obj.pessoa_status_id,\n            recebe_via_administrador: obj.recebe_via_administrador,\n            pessoa_fisica: pessoa_fisica,\n            pessoa_juridica: obj.pessoa_juridica,\n            endereco: [endereco],\n            carros: obj.carros,\n            pessoa_arquivos: obj.pessoa_arquivos,\n            conta_bancaria: obj.conta_bancaria,\n            ...(pessoa_arquivos.length && {pessoa_arquivos: pessoa_arquivos}),\n            ...(newData.prefilId && { foto_perfil_arquivo_id: newData.prefilId })\n        }\n        const session = await getSession()\n        const token = 'Bearer ' + session.access_token\n\n        console.log(\"body =\", body)\n\n        const res = await httpRequest.patch(\n            `${config.baseUrl}/api/proprietario`,\n            true,\n            token,\n            body)\n\n\n        return res && res.data ? res.data : res\n\n    } catch (error) {\n        console.log(error)\n        // notify(\"error\", error.response ? error.response.data : '')\n        return null\n    }\n}"]},"metadata":{},"sourceType":"module"}