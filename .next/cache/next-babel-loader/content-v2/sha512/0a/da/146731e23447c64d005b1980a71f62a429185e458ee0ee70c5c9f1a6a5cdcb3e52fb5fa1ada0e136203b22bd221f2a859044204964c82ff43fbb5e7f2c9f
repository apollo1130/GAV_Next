{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { config } from \"../../config\";\nimport httpRequest from \"../../utils/request\";\nimport { getSession } from 'next-auth/client';\nimport { notify, useInput } from \"../../utils/common\";\nimport { RiMastercardFill } from \"react-icons/ri\";\nimport axios from 'axios';\nexport const createFile = async formData => {\n  try {\n    const session = await getSession();\n    const token = 'Bearer ' + session.access_token;\n    let defaultOptions = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'multipart/form-data',\n        'Accept-Language': 'en'\n      }\n    };\n    Object.assign(defaultOptions.headers, {\n      Authorization: token\n    });\n    const res = await axios.post(`${config.baseUrl}/api/arquivos`, formData, _objectSpread({}, defaultOptions));\n    console.log('res', res.data); //debugger\n\n    return res && res.data ? res.data : res;\n  } catch (error) {\n    console.log(error.response); // notify(\"error\", error.response ? error.response.data : '')\n\n    return null;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}