{"ast":null,"code":"import { config } from \"../config\";\nimport { REGISTER_FAIL, REGISTER_REQUEST, REGISTER_SUCCESS } from \"../constants/authConstant\";\nimport httpRequest from \"../utils/request\";\nimport { getSession } from 'next-auth/client';\nimport axios from 'axios';\nexport const registerService = (regObj, callback) => async dispatch => {\n  dispatch({\n    type: REGISTER_REQUEST\n  });\n\n  try {\n    const body = {\n      username: regObj.username,\n      password: regObj.password\n    };\n    const {\n      data\n    } = await httpRequest.post(`${config.baseUrl}/register`, false, null, body);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: data\n    });\n    callback(data, null);\n  } catch (error) {\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: error.response\n    });\n    callback(null, error.response);\n  }\n};\nexport const loginService = async (service, token) => {\n  //console.log(\"login service\", service, token)\n  try {\n    const body = {\n      accessToken: token,\n      client_secret: config.GAV_CLIENT_SECRET,\n      client_id: config.GAV_CLIENT_ID //pessoa_cadastro_id:  2,\n\n    };\n    const {\n      data\n    } = await httpRequest.post(`${config.baseUrl}/api/auth/social/${service}`, false, null, body);\n    return data;\n  } catch (error) {\n    console.log(\"error = ---\");\n    console.log(error.response.data.message);\n  }\n};\nexport const getMe = async () => {\n  try {\n    const session = await getSession();\n\n    if (session) {\n      const token = session.access_token;\n      const {\n        data: me\n      } = await axios.get(`${config.baseUrl}/api/me`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json'\n        }\n      });\n      return me;\n    }\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n};","map":{"version":3,"sources":["D:/gav(1)/api/auth.js"],"names":["config","REGISTER_FAIL","REGISTER_REQUEST","REGISTER_SUCCESS","httpRequest","getSession","axios","registerService","regObj","callback","dispatch","type","body","username","password","data","post","baseUrl","payload","error","response","loginService","service","token","accessToken","client_secret","GAV_CLIENT_SECRET","client_id","GAV_CLIENT_ID","console","log","message","getMe","session","access_token","me","get","headers","Authorization","Accept"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAA0CC,gBAA1C,QAAkE,2BAAlE;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,eAAe,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB,MAAOC,QAAP,IAAoB;AACvEA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAET;AAAR,GAAD,CAAR;;AAEA,MAAI;AACF,UAAMU,IAAI,GAAG;AACXC,MAAAA,QAAQ,EAAEL,MAAM,CAACK,QADN;AAEXC,MAAAA,QAAQ,EAAEN,MAAM,CAACM;AAFN,KAAb;AAKA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMX,WAAW,CAACY,IAAZ,CACpB,GAAEhB,MAAM,CAACiB,OAAQ,WADG,EAErB,KAFqB,EAGrB,IAHqB,EAIrBL,IAJqB,CAAvB;AAOAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,gBADC;AAEPe,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKAN,IAAAA,QAAQ,CAACM,IAAD,EAAO,IAAP,CAAR;AACD,GAnBD,CAmBE,OAAOI,KAAP,EAAc;AACdT,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,aADC;AAEPiB,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAFR,KAAD,CAAR;AAKAX,IAAAA,QAAQ,CAAC,IAAD,EAAOU,KAAK,CAACC,QAAb,CAAR;AACD;AACF,CA9BM;AAgCP,OAAO,MAAMC,YAAY,GAAG,OAAOC,OAAP,EAAgBC,KAAhB,KAA0B;AACpD;AACA,MAAI;AAEF,UAAMX,IAAI,GAAG;AACXY,MAAAA,WAAW,EAAED,KADF;AAEXE,MAAAA,aAAa,EAAEzB,MAAM,CAAC0B,iBAFX;AAGXC,MAAAA,SAAS,EAAE3B,MAAM,CAAC4B,aAHP,CAIX;;AAJW,KAAb;AASA,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMX,WAAW,CAACY,IAAZ,CACpB,GAAEhB,MAAM,CAACiB,OAAQ,oBAAmBK,OAAQ,EADxB,EAErB,KAFqB,EAGrB,IAHqB,EAIrBV,IAJqB,CAAvB;AAMA,WAAOG,IAAP;AAED,GAnBD,CAmBE,OAAOI,KAAP,EAAc;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBgB,OAAhC;AACD;AACF,CAzBM;AA2BP,OAAO,MAAMC,KAAK,GAAG,YAAY;AAC/B,MAAI;AACF,UAAMC,OAAO,GAAG,MAAM5B,UAAU,EAAhC;;AACA,QAAI4B,OAAJ,EAAa;AACX,YAAMV,KAAK,GAAGU,OAAO,CAACC,YAAtB;AACA,YAAM;AAAEnB,QAAAA,IAAI,EAAEoB;AAAR,UAAe,MAAM7B,KAAK,CAAC8B,GAAN,CACxB,GAAEpC,MAAM,CAACiB,OAAQ,SADO,EAEzB;AACEoB,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASf,KAAM,EADxB;AAEPgB,UAAAA,MAAM,EAAE;AAFD;AADX,OAFyB,CAA3B;AASA,aAAOJ,EAAP;AACD;AACF,GAfD,CAeE,OAAOhB,KAAP,EAAc;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACA,WAAO,IAAP;AACD;AACF,CApBM","sourcesContent":["import { config } from \"../config\"\nimport { REGISTER_FAIL, REGISTER_REQUEST, REGISTER_SUCCESS } from \"../constants/authConstant\"\nimport httpRequest from \"../utils/request\"\nimport { getSession } from 'next-auth/client'\nimport axios from 'axios'\n\n\nexport const registerService = (regObj, callback) => async (dispatch) => {\n  dispatch({ type: REGISTER_REQUEST })\n\n  try {\n    const body = {\n      username: regObj.username,\n      password: regObj.password,\n    }\n\n    const { data } = await httpRequest.post(\n      `${config.baseUrl}/register`,\n      false,\n      null,\n      body\n    )\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: data,\n    })\n\n    callback(data, null)\n  } catch (error) {\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: error.response,\n    })\n\n    callback(null, error.response)\n  }\n}\n\nexport const loginService = async (service, token) => {\n  //console.log(\"login service\", service, token)\n  try {\n\n    const body = {\n      accessToken: token,\n      client_secret: config.GAV_CLIENT_SECRET,\n      client_id: config.GAV_CLIENT_ID,\n      //pessoa_cadastro_id:  2,\n\n\n    }\n\n    const { data } = await httpRequest.post(\n      `${config.baseUrl}/api/auth/social/${service}`,\n      false,\n      null,\n      body\n    )\n    return data\n\n  } catch (error) {\n    console.log(\"error = ---\")\n    console.log(error.response.data.message)\n  }\n}\n\nexport const getMe = async () => {\n  try {\n    const session = await getSession()\n    if (session) {\n      const token = session.access_token\n      const { data: me } = await axios.get(\n        `${config.baseUrl}/api/me`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            Accept: 'application/json',\n          },\n        }\n      )\n      return me\n    }\n  } catch (error) {\n    console.log(error)\n    return null\n  }\n}"]},"metadata":{},"sourceType":"module"}