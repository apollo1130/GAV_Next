{"ast":null,"code":"import _regeneratorRuntime from \"D:/gav(1)/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"D:/gav(1)/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"D:/gav(1)/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"D:/gav(1)/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { config } from \"../../config\";\nimport { getSession } from 'next-auth/client';\nimport httpRequest from \"../../utils/request\";\nimport { notify, useInput } from \"../../utils/common\";\nexport var updateDriver = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newData, obj) {\n    var pessoa_fisica, endereco, pessoa_arquivos, body, session, token, _yield$httpRequest$pa, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            pessoa_fisica = _objectSpread(_objectSpread({}, obj.pessoa_fisica), {}, {\n              cpf: newData.cpf,\n              nome: newData.nome\n            });\n            endereco = [{\n              \"latitude\": obj.latitude,\n              \"longitude\": obj.longitude,\n              \"logradouro\": newData.rua,\n              \"cep\": newData.cep,\n              \"numero\": newData.numero,\n              \"complemento\": newData.complemento,\n              \"bairro\": newData.bairro,\n              \"cidade_id\": newData.cidadeId\n            }];\n            pessoa_arquivos = [];\n\n            if (obj.pessoa_arquivos) {\n              pessoa_arquivos = _toConsumableArray(obj.pessoa_arquivos);\n            }\n\n            if (newData.cnhId) {\n              pessoa_arquivos.push({\n                arquivo_id: newData.cnhId,\n                pessoa_arquivo_tipo_id: 1\n              });\n            }\n\n            if (newData.segurandoId) {\n              pessoa_arquivos.push({\n                arquivo_id: newData.segurandoId,\n                pessoa_arquivo_tipo_id: 2\n              });\n            }\n\n            if (newData.comprovanteId) {\n              pessoa_arquivos.push({\n                arquivo_id: newData.comprovanteId,\n                pessoa_arquivo_tipo_id: 3\n              });\n            }\n\n            if (newData.rgId) {\n              pessoa_arquivos.push({\n                arquivo_id: newData.rgId,\n                pessoa_arquivo_tipo_id: 5\n              });\n            }\n\n            body = _objectSpread(_objectSpread({\n              telefone: obj.telefone,\n              celular: newData.celular,\n              email: newData.email,\n              pessoa_tipo_id: obj.pessoa_tipo_id,\n              pessoa_cadastro_id: obj.pessoa_cadastro_id,\n              pessoa_status_id: obj.pessoa_status_id,\n              recebe_via_administrador: obj.recebe_via_administrador,\n              pessoa_fisica: pessoa_fisica,\n              pessoa_juridica: obj.pessoa_juridica,\n              endereco: [endereco],\n              carros: obj.carros,\n              pessoa_arquivos: obj.pessoa_arquivos,\n              conta_bancaria: obj.conta_bancaria\n            }, pessoa_arquivos.length && {\n              pessoa_arquivos: pessoa_arquivos\n            }), newData.prefilId && {\n              foto_perfil_arquivo_id: newData.prefilId\n            }); //cnhID, rgId, segurandoId, comprovanteId, prefilId\n            // debugger\n\n            console.log(\"body = \", body);\n            _context.next = 13;\n            return getSession();\n\n          case 13:\n            session = _context.sent;\n            token = 'Bearer ' + session.access_token;\n            _context.next = 17;\n            return httpRequest.patch(\"\".concat(config.baseUrl, \"/api/motorista\"), true, token, body);\n\n          case 17:\n            _yield$httpRequest$pa = _context.sent;\n            data = _yield$httpRequest$pa.data;\n            console.log(\"updated data = \", data);\n            return _context.abrupt(\"return\", data);\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            notify(\"error\", _context.t0.response ? _context.t0.response.data.message : '');\n            return _context.abrupt(\"return\", null);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 23]]);\n  }));\n\n  return function updateDriver(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getCep = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cep) {\n    var session, token, _yield$httpRequest$ge, data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return getSession();\n\n          case 3:\n            session = _context2.sent;\n            token = 'Bearer ' + session.access_token;\n            _context2.next = 7;\n            return httpRequest.get(\"\".concat(config.baseUrl, \"/api/cep/\").concat(cep), true, token);\n\n          case 7:\n            _yield$httpRequest$ge = _context2.sent;\n            data = _yield$httpRequest$ge.data;\n            return _context2.abrupt(\"return\", data);\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", null);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 12]]);\n  }));\n\n  return function getCep(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:/gav(1)/api/driver/updateDriver.js"],"names":["config","getSession","httpRequest","notify","useInput","updateDriver","newData","obj","pessoa_fisica","cpf","nome","endereco","latitude","longitude","rua","cep","numero","complemento","bairro","cidadeId","pessoa_arquivos","cnhId","push","arquivo_id","pessoa_arquivo_tipo_id","segurandoId","comprovanteId","rgId","body","telefone","celular","email","pessoa_tipo_id","pessoa_cadastro_id","pessoa_status_id","recebe_via_administrador","pessoa_juridica","carros","conta_bancaria","length","prefilId","foto_perfil_arquivo_id","console","log","session","token","access_token","patch","baseUrl","data","response","message","getCep","get"],"mappings":"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","sourcesContent":["import { config } from \"../../config\"\nimport { getSession } from 'next-auth/client'\nimport httpRequest from \"../../utils/request\"\nimport { notify, useInput } from \"../../utils/common\"\n\nexport const updateDriver = async (newData, obj) => {\n    try {\n\n        const pessoa_fisica = { ...obj.pessoa_fisica, cpf: newData.cpf, nome: newData.nome }\n        const endereco = [{\n            \"latitude\": obj.latitude,\n            \"longitude\": obj.longitude,\n            \"logradouro\": newData.rua,\n            \"cep\": newData.cep,\n            \"numero\": newData.numero,\n            \"complemento\": newData.complemento,\n            \"bairro\": newData.bairro,\n            \"cidade_id\": newData.cidadeId\n        }]\n\n        let pessoa_arquivos = []\n\n        if (obj.pessoa_arquivos) {\n            pessoa_arquivos = [...obj.pessoa_arquivos]\n        }\n\n        if (newData.cnhId) {\n            pessoa_arquivos.push({ arquivo_id: newData.cnhId, pessoa_arquivo_tipo_id: 1 })\n        }\n        if (newData.segurandoId) {\n            pessoa_arquivos.push({arquivo_id: newData.segurandoId, pessoa_arquivo_tipo_id: 2 })\n        }\n\n        if (newData.comprovanteId) {\n            pessoa_arquivos.push({ arquivo_id: newData.comprovanteId, pessoa_arquivo_tipo_id: 3 })\n        }\n        if (newData.rgId) {\n            pessoa_arquivos.push({ arquivo_id: newData.rgId, pessoa_arquivo_tipo_id: 5 })\n        }\n\n        const body = {\n            telefone: obj.telefone,\n            celular: newData.celular,\n            email: newData.email,\n            pessoa_tipo_id: obj.pessoa_tipo_id,\n            pessoa_cadastro_id: obj.pessoa_cadastro_id,\n            pessoa_status_id: obj.pessoa_status_id,\n            recebe_via_administrador: obj.recebe_via_administrador,\n            pessoa_fisica: pessoa_fisica,\n            pessoa_juridica: obj.pessoa_juridica,\n            endereco: [endereco],\n            carros: obj.carros,\n            pessoa_arquivos: obj.pessoa_arquivos,\n            conta_bancaria: obj.conta_bancaria,\n            ...(pessoa_arquivos.length && {pessoa_arquivos: pessoa_arquivos}),\n            ...(newData.prefilId && { foto_perfil_arquivo_id: newData.prefilId })\n        }\n        //cnhID, rgId, segurandoId, comprovanteId, prefilId\n        // debugger\n        console.log(\"body = \", body)\n        const session = await getSession()\n        const token = 'Bearer ' + session.access_token\n\n        const { data } = await httpRequest.patch(\n            `${config.baseUrl}/api/motorista`,\n            true,\n            token,\n            body\n        )\n        console.log(\"updated data = \", data)\n        return data\n\n    } catch (error) {\n        console.log(error)\n        notify(\"error\", error.response ? error.response.data.message : '')\n        return null\n    }\n}\n\n\nexport const getCep = async (cep) => {\n    try {\n\n\n        const session = await getSession()\n        const token = 'Bearer ' + session.access_token\n\n        const { data } = await httpRequest.get(\n            `${config.baseUrl}/api/cep/${cep}`,\n            true,\n            token)\n        return data\n\n    } catch (error) {\n        //console.log(error.response.data)\n\n        return null\n    }\n}"]},"metadata":{},"sourceType":"module"}