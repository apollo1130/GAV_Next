{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nlet defaultOptions;\n\nconst client = (token = null) => {\n  return {\n    get: (url, tokenNeed, token, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      console.log('defaultOptions', defaultOptions);\n      return axios.get(url, _objectSpread(_objectSpread({}, defaultOptions), options));\n    },\n    post: (url, tokenNeed, token, data, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      return axios.post(url, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n    },\n    put: (url, tokenNeed, token, data, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      return axios.put(url, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n    },\n    patch: (url, tokenNeed, token, data, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      return axios.patch(url, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n    },\n    delete: (url, tokenNeed, token, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      return axios.delete(url, _objectSpread(_objectSpread({}, defaultOptions), options));\n    }\n  };\n};\n\nconst httpRequest = client(null);\nexport default httpRequest;","map":null,"metadata":{},"sourceType":"module"}