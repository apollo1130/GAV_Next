{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { config } from \"../../../config\";\nimport { gavProvider, getMe, getToken } from '../../../utils/providers';\nimport { loginService } from '../../../api/auth';\nimport { getSession } from 'next-auth/client';\nconst options = {\n  providers: [Providers.Google({\n    clientId: config.GOOGLE_CLIENT_ID,\n    clientSecret: config.GOOGLE_CLIENT_SECRET\n  }), Providers.Facebook({\n    clientId: config.FACEBOOK_CLIENT_ID,\n    clientSecret: config.FACEBOOK_CLIENT_SECRET\n  }), Providers.Credentials({\n    name: \"GAV\",\n\n    async authorize(credentials) {\n      const tokens = await getToken(credentials);\n\n      if (!tokens) {\n        return null;\n      }\n\n      const me = await getMe(tokens.access_token); //console.log(\"me===>>\", me)\n\n      const user = _objectSpread(_objectSpread({}, tokens), {}, {\n        name: me.nome,\n        email: me.email,\n        userId: me.id,\n        photo: me.foto_perfil_arquivo ? me.foto_perfil_arquivo.link : \"\"\n      });\n\n      return user;\n    }\n\n  })],\n  site: process.env.NEXTAUTH_URL,\n  pages: {\n    signIn: \"/login\",\n    error: '/login'\n  },\n  session: {\n    jwt: true\n  },\n  callbacks: {\n    // async signIn(user, account, profile) {\n    //     return true\n    // },\n    // async redirect(url, baseUrl) {\n    //     // console.log('url', url);\n    //     // console.log('baseUrl', baseUrl);\n    //     return url\n    // },\n    async redirect(url, baseUrl) {\n      return baseUrl;\n    },\n\n    async jwt(token, user, account, profile, isNewUser) {\n      // console.log(\"token ===> \", token)\n      // console.log(\"user ===> \", user)\n      // console.log(\"account ===> \", account)\n      // console.log(\"profile ===> \", profile)\n      // console.log(\"isNewUser ===> \", isNewUser)\n      if (user) {\n        token = _objectSpread(_objectSpread(_objectSpread({}, token), user), account && account);\n      }\n\n      return token;\n    },\n\n    async session(session, token) {\n      if (token && token.type === 'oauth') {\n        const data = await loginService(token.provider, token.accessToken); //console.log(\"data = \", data)\n\n        const me = await getMe(data.access_token); //console.log(\"me===>>\", me)\n\n        session = _objectSpread(_objectSpread({}, data), {}, {\n          name: me.nome,\n          email: me.email,\n          userId: me.id,\n          photo: me.foto_perfil_arquivo ? me.foto_perfil_arquivo.link : token.image ? token.image : \"\"\n        });\n      } else {\n        session = _objectSpread(_objectSpread({}, session), token);\n      }\n\n      console.log(\"token ==\", token);\n      console.log(\"session == \", session);\n      return session;\n    }\n\n  }\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":null,"metadata":{},"sourceType":"module"}