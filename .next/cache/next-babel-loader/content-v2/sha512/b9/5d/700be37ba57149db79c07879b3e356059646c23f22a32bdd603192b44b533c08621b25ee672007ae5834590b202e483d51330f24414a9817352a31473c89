{"ast":null,"code":"import { config } from \"../../../config\";\nimport { OWNER_LIST_OF_CARS_REQUEST, OWNER_LIST_OF_CARS_SUCCESS, OWNER_LIST_OF_CARS_FAIL } from \"../../../constants/owner\";\nimport { CARS_DETAILS_REQUEST, CARS_DETAILS_SUCCESS, CARS_DETAILS_FAIL } from \"../../../constants/carsConstant\";\nimport httpRequest from \"../../../utils/request\";\nimport serialize from '../../../utils/serilizers';\nimport { getSession } from 'next-auth/client';\nimport { notify, useInput } from \"../../../utils/common\";\nexport const ownerListOfCars = async (queryParamsObj, callback) => {\n  try {\n    const session = await getSession();\n    const token = 'Bearer ' + session.access_token;\n    const url = serialize(`${config.baseUrl}/api/proprietario/carros?`, queryParamsObj);\n    const {\n      data\n    } = await httpRequest.get(url, true, token);\n    callback();\n    console.log('session', session);\n    return data;\n  } catch (error) {\n    callback();\n    notify(\"error\", error.response && error.response.data.message || \"\");\n    return null;\n  }\n};\nexport const carDetails = callback => async dispatch => {\n  dispatch({\n    type: CARS_DETAILS_REQUEST\n  });\n\n  try {\n    const session = await getSession();\n    const token = 'Bearer ' + session.access_token;\n    const url = serialize(`${config.baseUrl}/api/docs#operation/alugueisList`);\n    const {\n      data\n    } = await httpRequest.get(url, true, token);\n    console.log(\"data = \", data);\n    dispatch({\n      type: CARS_DETAILS_SUCCESS,\n      payload: data\n    });\n    callback(data, null);\n  } catch (error) {\n    dispatch({\n      type: CARS_DETAILS_FAIL,\n      payload: error.response\n    });\n    callback(null, error.response);\n  }\n};","map":{"version":3,"sources":["D:/gav(1)/api/owner/cars/listOfCars.js"],"names":["config","OWNER_LIST_OF_CARS_REQUEST","OWNER_LIST_OF_CARS_SUCCESS","OWNER_LIST_OF_CARS_FAIL","CARS_DETAILS_REQUEST","CARS_DETAILS_SUCCESS","CARS_DETAILS_FAIL","httpRequest","serialize","getSession","notify","useInput","ownerListOfCars","queryParamsObj","callback","session","token","access_token","url","baseUrl","data","get","console","log","error","response","message","carDetails","dispatch","type","payload"],"mappings":"AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,SACIC,0BADJ,EAEIC,0BAFJ,EAGIC,uBAHJ,QAKO,0BALP;AAMA,SACIC,oBADJ,EAEIC,oBAFJ,EAGIC,iBAHJ,QAKO,iCALP;AAMA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,uBAAjC;AAIA,OAAO,MAAMC,eAAe,GAAG,OAAOC,cAAP,EAAuBC,QAAvB,KAAoC;AAE/D,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMN,UAAU,EAAhC;AACA,UAAMO,KAAK,GAAG,YAAYD,OAAO,CAACE,YAAlC;AACA,UAAMC,GAAG,GAAGV,SAAS,CAAE,GAAER,MAAM,CAACmB,OAAQ,2BAAnB,EAA+CN,cAA/C,CAArB;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMb,WAAW,CAACc,GAAZ,CACnBH,GADmB,EAEnB,IAFmB,EAGnBF,KAHmB,CAAvB;AAKAF,IAAAA,QAAQ;AACRQ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,OAAvB;AACA,WAAOK,IAAP;AAEH,GAbD,CAaE,OAAOI,KAAP,EAAc;AACZV,IAAAA,QAAQ;AACRJ,IAAAA,MAAM,CAAC,OAAD,EAAWc,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM,OAAvC,IAAmD,EAA7D,CAAN;AACA,WAAO,IAAP;AACH;AACJ,CApBM;AAsBP,OAAO,MAAMC,UAAU,GAAIb,QAAD,IAAc,MAAOc,QAAP,IAAoB;AACxDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEzB;AAAR,GAAD,CAAR;;AAEA,MAAI;AACA,UAAMW,OAAO,GAAG,MAAMN,UAAU,EAAhC;AACA,UAAMO,KAAK,GAAG,YAAYD,OAAO,CAACE,YAAlC;AACA,UAAMC,GAAG,GAAGV,SAAS,CAAE,GAAER,MAAM,CAACmB,OAAQ,kCAAnB,CAArB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,WAAW,CAACc,GAAZ,CACnBH,GADmB,EAEnB,IAFmB,EAGnBF,KAHmB,CAAvB;AAKAM,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,IAAvB;AAEAQ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAExB,oBADD;AAELyB,MAAAA,OAAO,EAAEV;AAFJ,KAAD,CAAR;AAKAN,IAAAA,QAAQ,CAACM,IAAD,EAAO,IAAP,CAAR;AACH,GAjBD,CAiBE,OAAOI,KAAP,EAAc;AACZI,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEvB,iBADD;AAELwB,MAAAA,OAAO,EAAEN,KAAK,CAACC;AAFV,KAAD,CAAR;AAKAX,IAAAA,QAAQ,CAAC,IAAD,EAAOU,KAAK,CAACC,QAAb,CAAR;AACH;AACJ,CA5BM","sourcesContent":["import { config } from \"../../../config\"\nimport {\n    OWNER_LIST_OF_CARS_REQUEST,\n    OWNER_LIST_OF_CARS_SUCCESS,\n    OWNER_LIST_OF_CARS_FAIL\n\n} from \"../../../constants/owner\"\nimport {\n    CARS_DETAILS_REQUEST,\n    CARS_DETAILS_SUCCESS,\n    CARS_DETAILS_FAIL\n\n} from \"../../../constants/carsConstant\"\nimport httpRequest from \"../../../utils/request\"\nimport serialize from '../../../utils/serilizers'\nimport { getSession } from 'next-auth/client'\nimport { notify, useInput } from \"../../../utils/common\"\n\n\n\nexport const ownerListOfCars = async (queryParamsObj, callback) => {\n\n    try {\n        const session = await getSession()\n        const token = 'Bearer ' + session.access_token\n        const url = serialize(`${config.baseUrl}/api/proprietario/carros?`, queryParamsObj)\n        const { data } = await httpRequest.get(\n            url,\n            true,\n            token\n        )\n        callback()\n        console.log('session', session);\n        return data\n\n    } catch (error) {\n        callback()\n        notify(\"error\", (error.response && error.response.data.message) || \"\")\n        return null\n    }\n}\n\nexport const carDetails = (callback) => async (dispatch) => {\n    dispatch({ type: CARS_DETAILS_REQUEST })\n\n    try {\n        const session = await getSession()\n        const token = 'Bearer ' + session.access_token\n        const url = serialize(`${config.baseUrl}/api/docs#operation/alugueisList`)\n        const { data } = await httpRequest.get(\n            url,\n            true,\n            token\n        )\n        console.log(\"data = \", data)\n\n        dispatch({\n            type: CARS_DETAILS_SUCCESS,\n            payload: data,\n        })\n\n        callback(data, null)\n    } catch (error) {\n        dispatch({\n            type: CARS_DETAILS_FAIL,\n            payload: error.response,\n        })\n\n        callback(null, error.response)\n    }\n}"]},"metadata":{},"sourceType":"module"}