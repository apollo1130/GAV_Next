{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getSession } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\n\nconst withAuth = WrappedComponent => {\n  return props => {\n    const Router = useRouter();\n    const {\n      0: verified,\n      1: setVerified\n    } = useState(false);\n    useEffect(async () => {\n      const session = await getSession();\n\n      if (session) {\n        setVerified(true);\n      } else {\n        Router.replace(\"/login\");\n      }\n    }, []);\n\n    if (verified) {\n      return /*#__PURE__*/_jsx(WrappedComponent, _objectSpread({}, props));\n    } else {\n      return null;\n    }\n  };\n};\n\nexport default withAuth;","map":null,"metadata":{},"sourceType":"module"}