{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { config } from \"../../config\";\nimport { getSession } from 'next-auth/client';\nimport httpRequest from \"../../utils/request\";\nimport { notify, useInput } from \"../../utils/common\";\nexport const updateDriver = async (newData, obj) => {\n  try {\n    const pessoa_fisica = _objectSpread(_objectSpread({}, obj.pessoa_fisica), {}, {\n      cpf: newData.cpf,\n      nome: newData.nome\n    });\n\n    const endereco = [{\n      \"latitude\": obj.latitude,\n      \"longitude\": obj.longitude,\n      \"logradouro\": newData.rua,\n      \"cep\": newData.cep,\n      \"numero\": newData.numero,\n      \"complemento\": newData.complemento,\n      \"bairro\": newData.bairro,\n      \"cidade_id\": newData.cidadeId\n    }];\n    let pessoa_arquivos = [];\n\n    if (obj.pessoa_arquivos) {\n      pessoa_arquivos = [...obj.pessoa_arquivos];\n    }\n\n    if (newData.cnhId) {\n      pessoa_arquivos.push({\n        arquivo_id: newData.cnhId,\n        pessoa_arquivo_tipo_id: 1\n      });\n    }\n\n    if (newData.segurandoId) {\n      pessoa_arquivos.push({\n        arquivo_id: newData.segurandoId,\n        pessoa_arquivo_tipo_id: 2\n      });\n    }\n\n    if (newData.comprovanteId) {\n      pessoa_arquivos.push({\n        arquivo_id: newData.comprovanteId,\n        pessoa_arquivo_tipo_id: 3\n      });\n    }\n\n    if (newData.rgId) {\n      pessoa_arquivos.push({\n        arquivo_id: newData.rgId,\n        pessoa_arquivo_tipo_id: 5\n      });\n    }\n\n    const body = _objectSpread(_objectSpread({\n      telefone: obj.telefone,\n      celular: newData.celular,\n      email: newData.email,\n      pessoa_tipo_id: obj.pessoa_tipo_id,\n      pessoa_cadastro_id: obj.pessoa_cadastro_id,\n      pessoa_status_id: obj.pessoa_status_id,\n      recebe_via_administrador: obj.recebe_via_administrador,\n      pessoa_fisica: pessoa_fisica,\n      pessoa_juridica: obj.pessoa_juridica,\n      endereco: [endereco],\n      carros: obj.carros,\n      pessoa_arquivos: obj.pessoa_arquivos,\n      conta_bancaria: obj.conta_bancaria\n    }, pessoa_arquivos.length && {\n      pessoa_arquivos: pessoa_arquivos\n    }), newData.prefilId && {\n      foto_perfil_arquivo_id: newData.prefilId\n    }); //cnhID, rgId, segurandoId, comprovanteId, prefilId\n    // debugger\n\n\n    console.log(\"body = \", body);\n    const session = await getSession();\n    const token = 'Bearer ' + session.access_token;\n    const {\n      data\n    } = await httpRequest.patch(`${config.baseUrl}/api/motorista`, true, token, body);\n    console.log(\"updated data = \", data);\n    return data;\n  } catch (error) {\n    console.log(error);\n    notify(\"error\", error.response ? error.response.data.message : '');\n    return null;\n  }\n};\nexport const getCep = async cep => {\n  try {\n    const session = await getSession();\n    const token = 'Bearer ' + session.access_token;\n    const {\n      data\n    } = await httpRequest.get(`${config.baseUrl}/api/cep/${cep}`, true, token);\n    return data;\n  } catch (error) {\n    //console.log(error.response.data)\n    return null;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}