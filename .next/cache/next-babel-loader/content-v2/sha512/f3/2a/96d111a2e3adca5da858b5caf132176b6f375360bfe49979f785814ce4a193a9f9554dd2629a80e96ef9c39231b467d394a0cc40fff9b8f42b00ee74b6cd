{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { config } from \"../../../config\";\nimport { gavProvider, getMe, getToken } from '../../../utils/providers';\nimport { loginService } from '../../../api/auth';\nimport { getSession } from 'next-auth/client';\nconst options = {\n  providers: [Providers.Google({\n    clientId: config.GOOGLE_CLIENT_ID,\n    clientSecret: config.GOOGLE_CLIENT_SECRET\n  }), Providers.Facebook({\n    clientId: config.FACEBOOK_CLIENT_ID,\n    clientSecret: config.FACEBOOK_CLIENT_SECRET\n  }), Providers.Credentials({\n    name: \"GAV\",\n\n    async authorize(credentials) {\n      const tokens = await getToken(credentials);\n\n      if (!tokens) {\n        return null;\n      }\n\n      const me = await getMe(tokens.access_token); //console.log(\"me===>>\", me)\n\n      const user = _objectSpread(_objectSpread({}, tokens), {}, {\n        name: me.nome,\n        email: me.email,\n        userId: me.id,\n        photo: me.foto_perfil_arquivo ? me.foto_perfil_arquivo.link : \"\"\n      });\n\n      return user;\n    }\n\n  })],\n  site: process.env.NEXTAUTH_URL,\n  pages: {\n    signIn: \"/login\",\n    error: '/login'\n  },\n  session: {\n    jwt: true\n  },\n  callbacks: {\n    // async signIn(user, account, profile) {\n    //     return true\n    // },\n    // async redirect(url, baseUrl) {\n    //     // console.log('url', url);\n    //     // console.log('baseUrl', baseUrl);\n    //     return url\n    // },\n    async redirect(url, baseUrl) {\n      return baseUrl;\n    },\n\n    async jwt(token, user, account, profile, isNewUser) {\n      // console.log(\"token ===> \", token)\n      // console.log(\"user ===> \", user)\n      // console.log(\"account ===> \", account)\n      // console.log(\"profile ===> \", profile)\n      // console.log(\"isNewUser ===> \", isNewUser)\n      if (user) {\n        token = _objectSpread(_objectSpread(_objectSpread({}, token), user), account && account);\n      }\n\n      return token;\n    },\n\n    async session(session, token) {\n      if (token && token.type === 'oauth') {\n        const data = await loginService(token.provider, token.accessToken); //console.log(\"data = \", data)\n\n        const me = await getMe(data.access_token); //console.log(\"me===>>\", me)\n\n        session = _objectSpread(_objectSpread({}, data), {}, {\n          name: me.nome,\n          email: me.email,\n          userId: me.id,\n          photo: me.foto_perfil_arquivo ? me.foto_perfil_arquivo.link : token.image ? token.image : \"\"\n        });\n      } else {\n        session = _objectSpread(_objectSpread({}, session), token);\n      }\n\n      console.log(\"token ==\", token);\n      console.log(\"session == \", session);\n      return session;\n    }\n\n  }\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["D:/gav(1)/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","config","gavProvider","getMe","getToken","loginService","getSession","options","providers","Google","clientId","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","Facebook","FACEBOOK_CLIENT_ID","FACEBOOK_CLIENT_SECRET","Credentials","name","authorize","credentials","tokens","me","access_token","user","nome","email","userId","id","photo","foto_perfil_arquivo","link","site","process","env","NEXTAUTH_URL","pages","signIn","error","session","jwt","callbacks","redirect","url","baseUrl","token","account","profile","isNewUser","type","data","provider","accessToken","image","console","log","req","res"],"mappings":"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","sourcesContent":["import NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\nimport { config } from \"../../../config\"\nimport { gavProvider, getMe, getToken } from '../../../utils/providers'\nimport { loginService } from '../../../api/auth'\nimport { getSession } from 'next-auth/client'\n\n\nconst options = {\n    providers: [\n        Providers.Google({\n            clientId: config.GOOGLE_CLIENT_ID,\n            clientSecret: config.GOOGLE_CLIENT_SECRET,\n\n        }),\n        Providers.Facebook({\n            clientId: config.FACEBOOK_CLIENT_ID,\n            clientSecret: config.FACEBOOK_CLIENT_SECRET\n        }),\n        Providers.Credentials({\n            name: \"GAV\",\n            async authorize(credentials) {\n\n\n                const tokens = await getToken(credentials)\n                if (!tokens) {\n                    return null\n                }\n                const me = await getMe(tokens.access_token)\n                //console.log(\"me===>>\", me)\n                const user = {\n                    ...tokens,\n                    name: me.nome,\n                    email: me.email,\n                    userId: me.id,\n                    photo: me.foto_perfil_arquivo ? me.foto_perfil_arquivo.link : \"\"\n\n                }\n\n                return user\n\n            },\n        }),\n\n    ],\n    site: process.env.NEXTAUTH_URL,\n    pages: {\n        signIn: \"/login\",\n        error: '/login'\n    },\n    session: {\n        jwt: true,\n    },\n    callbacks: {\n        // async signIn(user, account, profile) {\n        //     return true\n        // },\n        // async redirect(url, baseUrl) {\n        //     // console.log('url', url);\n        //     // console.log('baseUrl', baseUrl);\n\n        //     return url\n        // },\n        async redirect(url, baseUrl) {\n            return baseUrl\n        },\n        \n        async jwt(token, user, account, profile, isNewUser) {\n            // console.log(\"token ===> \", token)\n            // console.log(\"user ===> \", user)\n            // console.log(\"account ===> \", account)\n            // console.log(\"profile ===> \", profile)\n            // console.log(\"isNewUser ===> \", isNewUser)\n\n            if (user) {\n\n                token = {\n                    ...token,\n                    ...user,\n                    ...(account && account)\n                }\n\n            }\n\n            return token\n        },\n        async session(session, token) {\n\n\n            if (token && (token.type === 'oauth')) {\n\n                const data = await loginService(token.provider, token.accessToken)\n                //console.log(\"data = \", data)\n                const me = await getMe(data.access_token)\n                //console.log(\"me===>>\", me)\n                session = {\n                    ...data,\n                    name: me.nome,\n                    email: me.email,\n                    userId: me.id,\n                    photo: me.foto_perfil_arquivo ? me.foto_perfil_arquivo.link : token.image ? token.image : \"\"\n\n                }\n\n            } else {\n                session = {\n                    ...session, ...token\n                }\n            }\n            console.log(\"token ==\", token)\n            console.log(\"session == \", session)\n            return session\n        }\n\n\n    },\n\n\n\n}\n\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}