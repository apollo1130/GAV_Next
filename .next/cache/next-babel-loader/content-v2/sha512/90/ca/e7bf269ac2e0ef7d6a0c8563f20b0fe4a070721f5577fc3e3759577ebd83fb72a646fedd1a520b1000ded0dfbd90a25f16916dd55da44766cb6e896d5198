{"ast":null,"code":"import _regeneratorRuntime from \"D:/gav(1)/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"D:/gav(1)/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"D:/gav(1)/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"D:/gav(1)/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { config } from \"../../config\";\nimport { getSession } from 'next-auth/client';\nimport httpRequest from \"../../utils/request\";\nimport { notify, useInput } from \"../../utils/common\";\nexport var updateDriver = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newData, obj) {\n    var pessoa_fisica, endereco, pessoa_arquivos, body, session, token, _yield$httpRequest$pa, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            pessoa_fisica = _objectSpread(_objectSpread({}, obj.pessoa_fisica), {}, {\n              cpf: newData.cpf,\n              nome: newData.nome\n            });\n            endereco = [{\n              \"latitude\": obj.latitude,\n              \"longitude\": obj.longitude,\n              \"logradouro\": newData.rua,\n              \"cep\": newData.cep,\n              \"numero\": newData.numero,\n              \"complemento\": newData.complemento,\n              \"bairro\": newData.bairro,\n              \"cidade_id\": newData.cidadeId\n            }];\n            pessoa_arquivos = [];\n\n            if (obj.pessoa_arquivos) {\n              pessoa_arquivos = _toConsumableArray(obj.pessoa_arquivos);\n            }\n\n            if (newData.cnhId) {\n              pessoa_arquivos.push({\n                arquivo_id: newData.cnhId,\n                pessoa_arquivo_tipo_id: 1\n              });\n            }\n\n            if (newData.segurandoId) {\n              pessoa_arquivos.push({\n                arquivo_id: newData.segurandoId,\n                pessoa_arquivo_tipo_id: 2\n              });\n            }\n\n            if (newData.comprovanteId) {\n              pessoa_arquivos.push({\n                arquivo_id: newData.comprovanteId,\n                pessoa_arquivo_tipo_id: 3\n              });\n            }\n\n            if (newData.rgId) {\n              pessoa_arquivos.push({\n                arquivo_id: newData.rgId,\n                pessoa_arquivo_tipo_id: 5\n              });\n            }\n\n            body = _objectSpread(_objectSpread({\n              telefone: obj.telefone,\n              celular: newData.celular,\n              email: newData.email,\n              pessoa_tipo_id: obj.pessoa_tipo_id,\n              pessoa_cadastro_id: obj.pessoa_cadastro_id,\n              pessoa_status_id: obj.pessoa_status_id,\n              recebe_via_administrador: obj.recebe_via_administrador,\n              pessoa_fisica: pessoa_fisica,\n              pessoa_juridica: obj.pessoa_juridica,\n              endereco: [endereco],\n              carros: obj.carros,\n              pessoa_arquivos: obj.pessoa_arquivos,\n              conta_bancaria: obj.conta_bancaria\n            }, pessoa_arquivos.length && {\n              pessoa_arquivos: pessoa_arquivos\n            }), newData.prefilId && {\n              foto_perfil_arquivo_id: newData.prefilId\n            }); //cnhID, rgId, segurandoId, comprovanteId, prefilId\n            // debugger\n\n            console.log(\"body = \", body);\n            _context.next = 13;\n            return getSession();\n\n          case 13:\n            session = _context.sent;\n            token = 'Bearer ' + session.access_token;\n            _context.next = 17;\n            return httpRequest.patch(\"\".concat(config.baseUrl, \"/api/motorista\"), true, token, body);\n\n          case 17:\n            _yield$httpRequest$pa = _context.sent;\n            data = _yield$httpRequest$pa.data;\n            console.log(\"updated data = \", data);\n            return _context.abrupt(\"return\", data);\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            notify(\"error\", _context.t0.response ? _context.t0.response.data.message : '');\n            return _context.abrupt(\"return\", null);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 23]]);\n  }));\n\n  return function updateDriver(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getCep = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cep) {\n    var session, token, _yield$httpRequest$ge, data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return getSession();\n\n          case 3:\n            session = _context2.sent;\n            token = 'Bearer ' + session.access_token;\n            _context2.next = 7;\n            return httpRequest.get(\"\".concat(config.baseUrl, \"/api/cep/\").concat(cep), true, token);\n\n          case 7:\n            _yield$httpRequest$ge = _context2.sent;\n            data = _yield$httpRequest$ge.data;\n            return _context2.abrupt(\"return\", data);\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", null);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 12]]);\n  }));\n\n  return function getCep(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}