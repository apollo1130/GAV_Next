{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nlet defaultOptions;\n\nconst client = (token = null) => {\n  return {\n    get: (url, tokenNeed, token, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      console.log('defaultOptions', defaultOptions);\n      return axios.get(url, _objectSpread(_objectSpread({}, defaultOptions), options));\n    },\n    post: (url, tokenNeed, token, data, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      return axios.post(url, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n    },\n    put: (url, tokenNeed, token, data, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      return axios.put(url, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n    },\n    patch: (url, tokenNeed, token, data, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      return axios.patch(url, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n    },\n    delete: (url, tokenNeed, token, options = {}) => {\n      defaultOptions = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en'\n        }\n      };\n\n      if (tokenNeed) {\n        Object.assign(defaultOptions.headers, {\n          Authorization: token\n        });\n      }\n\n      return axios.delete(url, _objectSpread(_objectSpread({}, defaultOptions), options));\n    }\n  };\n};\n\nconst httpRequest = client(null);\nexport default httpRequest;","map":{"version":3,"sources":["D:/gav(1)/utils/request.js"],"names":["axios","defaultOptions","client","token","get","url","tokenNeed","options","headers","Object","assign","Authorization","console","log","post","data","put","patch","delete","httpRequest"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nlet defaultOptions\nconst client = (token = null) => {\n    return {\n        get: (url, tokenNeed, token, options = {}) => {\n            defaultOptions = {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Accept-Language': 'en',\n                },\n            }\n\n            if (tokenNeed) {\n                Object.assign(defaultOptions.headers, {\n                    Authorization: token,\n                })\n            }\n\n            console.log('defaultOptions', defaultOptions);\n\n            return axios.get(url, { ...defaultOptions, ...options })\n        },\n\n        post: (url, tokenNeed, token, data, options = {}) => {\n            defaultOptions = {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Accept-Language': 'en',\n                },\n            }\n\n            if (tokenNeed) {\n                Object.assign(defaultOptions.headers, {\n                    Authorization: token,\n                })\n            }\n\n            return axios.post(url, data, { ...defaultOptions, ...options })\n        },\n\n        put: (url, tokenNeed, token, data, options = {}) => {\n            defaultOptions = {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Accept-Language': 'en',\n                },\n            }\n\n            if (tokenNeed) {\n                Object.assign(defaultOptions.headers, {\n                    Authorization: token,\n                })\n            }\n\n            return axios.put(url, data, { ...defaultOptions, ...options })\n        },\n\n        patch: (url, tokenNeed, token, data, options = {}) => {\n            defaultOptions = {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Accept-Language': 'en',\n                },\n            }\n\n            if (tokenNeed) {\n                Object.assign(defaultOptions.headers, {\n                    Authorization: token,\n                })\n            }\n\n            return axios.patch(url, data, { ...defaultOptions, ...options })\n        },\n\n        delete: (url, tokenNeed, token, options = {}) => {\n            defaultOptions = {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Accept-Language': 'en',\n                },\n            }\n\n            if (tokenNeed) {\n                Object.assign(defaultOptions.headers, {\n                    Authorization: token,\n                })\n            }\n\n            return axios.delete(url, { ...defaultOptions, ...options })\n        },\n    }\n}\nconst httpRequest = client(null)\nexport default httpRequest"]},"metadata":{},"sourceType":"module"}