{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../config';\nimport { createPerson } from '../api/cadastro/captasao/createPerson';\nconst domain = config.baseUrl;\nexport const gavProvider = {\n  clientId: config.GAV_CLIENT_ID,\n  clientSecret: config.GAV_CLIENT_SECRET,\n  grant_type: config.grantType\n};\nexport const getToken = async credentials => {\n  credentials.scope = '';\n  credentials.grant_type = gavProvider.grant_type;\n  credentials.client_id = gavProvider.clientId;\n  credentials.client_secret = gavProvider.clientSecret; //console.log(\"creadiantials  = \", credentials)\n\n  try {\n    const {\n      data: tokens\n    } = await axios.post(`${domain}/oauth/token`, credentials); // console.log(tokens)\n\n    return tokens;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n};\nexport const getMe = async access_token => {\n  try {\n    const {\n      data: me\n    } = await axios.get(`${domain}/api/me`, {\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n        Accept: 'application/json'\n      }\n    });\n    return me;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n};","map":{"version":3,"sources":["D:/gav(1)/utils/providers.js"],"names":["axios","config","createPerson","domain","baseUrl","gavProvider","clientId","GAV_CLIENT_ID","clientSecret","GAV_CLIENT_SECRET","grant_type","grantType","getToken","credentials","scope","client_id","client_secret","data","tokens","post","error","console","log","getMe","access_token","me","get","headers","Authorization","Accept"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AAEA,MAAMC,MAAM,GAAGF,MAAM,CAACG,OAAtB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,QAAQ,EAAEL,MAAM,CAACM,aADM;AAEvBC,EAAAA,YAAY,EAAEP,MAAM,CAACQ,iBAFE;AAGvBC,EAAAA,UAAU,EAAET,MAAM,CAACU;AAHI,CAApB;AAMP,OAAO,MAAMC,QAAQ,GAAG,MAAOC,WAAP,IAAuB;AAC3CA,EAAAA,WAAW,CAACC,KAAZ,GAAoB,EAApB;AACAD,EAAAA,WAAW,CAACH,UAAZ,GAAyBL,WAAW,CAACK,UAArC;AACAG,EAAAA,WAAW,CAACE,SAAZ,GAAwBV,WAAW,CAACC,QAApC;AACAO,EAAAA,WAAW,CAACG,aAAZ,GAA4BX,WAAW,CAACG,YAAxC,CAJ2C,CAK3C;;AACA,MAAI;AACA,UAAM;AAAES,MAAAA,IAAI,EAAEC;AAAR,QAAmB,MAAMlB,KAAK,CAACmB,IAAN,CAC1B,GAAEhB,MAAO,cADiB,EAE3BU,WAF2B,CAA/B,CADA,CAKD;;AACC,WAAOK,MAAP;AACH,GAPD,CAOE,OAAOE,KAAP,EAAc;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACC,WAAO,IAAP;AACH;AACJ,CAjBM;AAmBP,OAAO,MAAMG,KAAK,GAAG,MAAOC,YAAP,IAAwB;AACzC,MAAI;AACA,UAAM;AAAEP,MAAAA,IAAI,EAAEQ;AAAR,QAAe,MAAMzB,KAAK,CAAC0B,GAAN,CACtB,GAAEvB,MAAO,SADa,EAEvB;AACIwB,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASJ,YAAa,EADjC;AAELK,QAAAA,MAAM,EAAE;AAFH;AADb,KAFuB,CAA3B;AASA,WAAOJ,EAAP;AACH,GAXD,CAWE,OAAOL,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,IAAP;AACH;AACJ,CAhBM","sourcesContent":["import axios from 'axios'\nimport {config} from '../config'\nimport { createPerson } from '../api/cadastro/captasao/createPerson'\n\nconst domain = config.baseUrl\n\nexport const gavProvider = {\n    clientId: config.GAV_CLIENT_ID,\n    clientSecret: config.GAV_CLIENT_SECRET,\n    grant_type: config.grantType\n}\n\nexport const getToken = async (credentials) => {\n    credentials.scope = ''\n    credentials.grant_type = gavProvider.grant_type\n    credentials.client_id = gavProvider.clientId\n    credentials.client_secret = gavProvider.clientSecret\n    //console.log(\"creadiantials  = \", credentials)\n    try {\n        const { data: tokens } = await axios.post(\n            `${domain}/oauth/token`,\n            credentials\n        )\n       // console.log(tokens)\n        return tokens\n    } catch (error) {\n       console.log(error)\n        return null\n    }\n}\n\nexport const getMe = async (access_token) => {\n    try {\n        const { data: me } = await axios.get(\n            `${domain}/api/me`,\n            {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                    Accept: 'application/json',\n                },\n            }\n        )\n        return me\n    } catch (error) {\n        console.log(error)\n        return null\n    }\n}"]},"metadata":{},"sourceType":"module"}